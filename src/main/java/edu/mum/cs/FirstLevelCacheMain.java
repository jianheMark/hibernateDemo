package edu.mum.cs;

import edu.mum.cs.domain.Book;
import edu.mum.cs.domain.Person;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import java.time.LocalDate;

public class FirstLevelCacheMain {
    static final EntityManagerFactory emf = Persistence.createEntityManagerFactory("edu.mum.cs");

    private void persist() {
        EntityManager entityManager = emf.createEntityManager();
        entityManager.getTransaction().begin();

        Person p1 = new Person("jian","he","test@test.com", LocalDate.now());
        System.out.println("1---------------");
//        Book b1 = new Book("11-11-22-33-6", "Hibernate");
//        entityManager.persist(b1); // This step in the persist context. Does not hit the database. natural primary key.
        entityManager.persist(p1); //Now p1 is in the persist context. this step will immediate make the insert into database.autogenerated key
        System.out.println("2---------------");

        entityManager.getTransaction().commit();
        System.out.println("3---------------");

        entityManager.close();
    }

    private void retrieval() {
        EntityManager entityManager = emf.createEntityManager();
        entityManager.getTransaction().begin();
        Book b1 = new Book("11-11-22-33-6", "Hibernate");
        System.out.println("1---------------");
        entityManager.persist(b1); // This step is to persist context. Does not hit the database. natural primary key.
        System.out.println("2---------------");
    //does not retrieval data from database. Directly using cache value to find the data.

        Book Book1 = entityManager.find(Book.class, "11-11-22-33-6");
        System.out.println("--------Book1.getTitle()---"+ Book1.getTitle());
        //directly retrieval data from cache.
        System.out.println("3---------------" + Book1.getIsbn() + "-------" + Book1.getTitle());//retrieval data from cache. not database.

        entityManager.getTransaction().commit();
        System.out.println("4---------------");

        entityManager.close();

    }

    private void update() {
        EntityManager entityManager = emf.createEntityManager();
        entityManager.getTransaction().begin();

        Person p1 = new Person("jian", "he", "test@test.com", LocalDate.now());
//        Book b1 = new Book("11-11-22-33-6", "Hibernate");
        System.out.println("------New Object created, Persist Begins---------");
//        entityManager.persist(b1); // This step in the persist context. Does not hit the database. natural primary key.
        entityManager.persist(p1); //Identity ID wil hit to the database.
        System.out.println("-------After Persist--------");
//        b1.setTitle("Spring");
        p1.setFirstName("mark");
        System.out.println("-------After Set First Name----------");
        entityManager.getTransaction().commit();// make all the changed to the database.
        System.out.println("------After Transaction Commit---------");
        entityManager.close();
    }

    private void remove() {
        //https://www.youtube.com/watch?v=dNLZceo9ufo&list=PLGTrAf5-F1YLNgq_0TXd9Xu245dJxqJMr&index=23

        EntityManager entityManager = emf.createEntityManager();
        entityManager.getTransaction().begin();
//        Book b1 = new Book("11-11-22-33-6","Hibernate");
        Person p1 = new Person("jian", "he", "test@test.com", LocalDate.now());
        System.out.println("-------now persist-------");
//        entityManager.persist(b1); // This step in the persist context. Does not hit the database. natural primary key.
        entityManager.persist(p1);
        System.out.println("2-----after persist-----------");
        p1.setFirstName("JIAN"); //Update Hold in cache.
        //        b1.setTitle("Spring");
        System.out.println("-----Before entitymanger remove method");
        entityManager.remove(p1); //removed from cache.
        System.out.println("-------afetr entitymanager remove function---------");

        boolean exists = entityManager.contains(p1);
        System.out.println("Containing p1: " + exists);

        System.out.println("--------before commit-------");
        entityManager.getTransaction().commit();// make all the changed to the database.
        System.out.println("--------After commit-------");
        entityManager.close();
    }

    private void pushChangetoDB() {
//        www.youtube.com/watch?v=sYmmy4ksmB0&list=PLGTrAf5-F1YLNgq_0TXd9Xu245dJxqJMr&index=24
//        Key Gotta. All the things will make to the database, before we flush, query, commit.
        EntityManager entityManager = emf.createEntityManager();
        entityManager.getTransaction().begin();
        System.out.println("1---------------");
        Book b1 = new Book("11-11-22-33-6", "Hibernate");
        System.out.println("-------Before persist--------");
        entityManager.persist(b1); // This step in the persist context. Does not hit the database. natural primary key.
        System.out.println("--------After persist-------");
        b1.setTitle("Welcome");
        System.out.println("changes---------------");
        //before make query. First will fetch all the changes from the database, then make query.
        TypedQuery<Book> query = entityManager.createQuery("from Book", Book.class);
        query.getResultList();
        System.out.println("-------After make query to get the ResultList.");
//        entityManager.flush(); //before flush, all the changes will be made in the database.
        System.out.println("4---------------");
        entityManager.getTransaction().commit();// make all the changed to the database.
        System.out.println("5---------------");
        entityManager.close();
    }

    private void clear() {
        EntityManager entityManager = emf.createEntityManager();
        entityManager.getTransaction().begin();
        System.out.println("1---------------");
        Book b1 = new Book("11-11-22-33-6", "Hibernate");
        System.out.println("2---------------");
        entityManager.persist(b1); // This step in the persist context. Does not hit the database. natural primary key.
        System.out.println("Before Clear() persist context have Object: " + entityManager.contains(b1));
        entityManager.flush();// Before use clear, first need use flush. otherwise, all the changes will be lost.
        System.out.println("--------------");
        entityManager.clear(); //before flush, all the changes will be made in the database.
        System.out.println("After clear() persist context contain Object: " + entityManager.contains(b1));
        entityManager.getTransaction().commit();// make all the changed to the database.
        System.out.println("5---------------");
        entityManager.close();
    }


    public static void main(String[] args) {
        FirstLevelCacheMain main = new FirstLevelCacheMain();
//        main.persist();
//        main.retrieval();
//        main.update();
//        main.remove();
        main.pushChangetoDB();
//        main.clear();
        emf.close();


    }


}
